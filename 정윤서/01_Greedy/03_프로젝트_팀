# [Baekjoon - 20044] 프로젝트 팀

| https://www.acmicpc.net/problem/20044 |
| --- |
| 코딩 프로젝트 수업을 가르치는 수찬이는 프로젝트 팀을 가능하면 공정하게 구성하려고 한다. 프로젝트 팀 하나는 두 명의 학생으로 구성되는데, 각 학생들의 코딩 역량은 모두 다르다. 각 학생은 한 팀의 팀원이어야 한다. 공정성을 높이기 위해 수찬이는 팀원 코딩 역량의 합을 최대한 일정하게 유지하려고 한다. 학생들이 코딩 역량이 주어졌을 때 수찬이가 팀을 구성하는데 도움이 되는 프로그램을 작성하라.

문제를 간단하게 하기 위해, 학생 수는 2n이라 가정하자 (n은 양의 정수). 각 학생 si의 코딩 역량은 양의 정수 w(si)로 나타내면 한 i번째 팀 Gi의 코딩 역량은 w(Gi) = ∑s∈Giw(s)로 나타낼 수 있다. 작성할 프로그램 목적은 Sm = min{w(Gi) | 1 ≤ i ≤ n}이 최대화되도록 n개의 팀 G1, G2, …, Gn 을 구성하고 이때 Sm을 출력하는 것이다.

예를 들어, 학생들의 코딩 역량이 {1, 7, 5, 8}로 주어졌다면 (8, 1), (7, 5)로 2개의 조를 짤 수 있으며 프로그램은 9를 출력해야 한다. |

| 입력 |
| --- |
| 입력은 표준입력을 사용한다. 입력의 첫 번째 행에는 팀 수를 나타내는 양의 정수 n(1 ≤ n ≤ 5,000)이 주어진다. 그 다음 행에 학생 si 의 코딩 역량 w(si)를 나타내는 2n개의 양의 정수가 공백으로 분리되어 주어진다 (1 ≤ w
(si) ≤ 100,000). 학생들의 코딩 역량은 모두 다르다. 즉, i ≠ j이면 w(si) ≠ w(sj)이다. |

| 출력 |
| --- |
| 출력은 표준출력을 사용한다. 표준출력 한 행에 Sm을 출력한다. |

---

## 코드

```python
def Input():
    n = int(input())
    students = list(map(int, input().split()))
    return n, students

def makingTeams(n, students):
    # 학생들의 역량을 오름차순 정렬 후
    students.sort()
    teams = []
    # 양끝부터 차례로 왼쪽(작은 것) 하나, 오른쪽(큰 것) 하나 더하면 된다.
    for i in range(n):
        w = students[i] + students[-i - 1]
        teams.append(w)
    return teams

def main():
    n, students = Input()
    teams = makingTeams(n, students)
    print(min(teams))

main()
```

---

## 설명

처음에는 정렬한다는 생각을 못했어서 일일이 다 해봐야 하나 생각했는데 그렇게 안 해도 된다.

학생들의 역량을 리스트로 받아와서 오름차순(내림차순도 됨. 상관 없음.) 정렬 후, 양끝부터 양끝에 있는 것들을 하나씩 더하면서 안으로 들어가면 된다.

ex) 1 2 3 4 5 6 7 8 라고 하면, 1과 8, 2와 7… 을 더하면 된다.

---

## **소요 시간**

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/45888d84-2e22-4dd8-b8a3-2e1e4704efaa/Untitled.png)

처음에 def makingTeams 조금 작성하다가 스탑워치 버튼 안 누른 거 생각나서 눌렀기 때문에 실제로는 약 10분 정도 소요됐을 것이다.
