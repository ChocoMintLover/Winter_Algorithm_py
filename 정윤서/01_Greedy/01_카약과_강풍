# [Baekjoon - 2891] 카약과 강풍

| https://www.acmicpc.net/problem/2891 |
| --- |
| 상근이는 카약 대회를 개최했다. 그런데, 갑자기 엄청난 강풍이 경기장에 불었고, 일부 카약이 부서졌다. 경기는 5분 안에 시작해야 하는 상황이다.
다행히 일부 팀은 혹시 모를 사태에 대비해서 카약을 하나 더 경기장에 들고 왔다. 카약은 매우 무겁고 운반하기 어렵다. 따라서, 자신의 바로 다음이나 전에 경기하는 팀에게만 카약을 빌려주려고 한다. 즉, 팀 4는 여분의 카약을 3이나 5에게만 빌려줄 수 있다. 다른 팀에게서 받은 카약은 또 다른 팀에게 빌려줄 수 없다. 또, 카약을 하나 더 가져온 팀의 카약이 손상되었다면, 여분의 카약으로 경기에 출전하게되고, 이 카약은 다른 팀에게 빌려줄 수 없다.
카약이 부서진 팀과 하나 더 가져온 팀이 주어진다. 카약을 적절히 빌렸을 때 출발하지 못하는 팀의 최솟값은 몇 팀인지 구하는 프로그램을 작성하시오. |

| 입력 |
| --- |
| 첫째 줄에 팀의 수 N, 카약이 손상된 팀의 수 S, 카약을 하나 더 가져온 팀의 수 R이 주어진다. (2 ≤ N ≤ 10, 1 ≤ S, R ≤ N)
둘째 줄에는 카약이 손상된 팀의 번호가 주어진다. 팀 번호는 중복되지 않는다.
셋째 줄에는 카약을 하나 더 가져온 팀의 번호가 주어진다. 팀 번호는 중복되지 않는다. |

| 출력 |
| --- |
| 첫째 줄에 출발을 할 수 없는 팀의 최솟값을 출력한다. |

---

## 코드

```python
import copy

def Input():
    n, s, r = map(int, input().split())
		# 손상된 카약 리스트로 입력받기
    damaged = list(map(int, input().split()))
		# 여분의 카약 리스트로 입력받기
    extra = list(map(int, input().split()))
    return n, damaged, extra

# 카약이 손상됐으면서 여분이 있는 경우는 그 팀이 무조건 여분의 카약 사용
def borrowItself(damaged, extra):
    newDamaged = copy.deepcopy(damaged)
    newExtra = copy.deepcopy(extra)
    for d in damaged:
        if d in extra:
            newDamaged.remove(d)
            newExtra.remove(d)
    return newDamaged, newExtra

# 여분의 카약을 가진 팀이 자신의 오른쪽 팀에게 빌려준다.
def borrowRight(damaged, extra):
    damagedR = copy.deepcopy(damaged)
    extraR = copy.deepcopy(extra)
    for d in damaged:
        if d+1 in extra:
            damagedR.remove(d)
            extraR.remove(d+1)
    return damagedR, extraR

# 여분의 카약을 가진 팀이 자신의 왼쪽 팀에게 빌려준다.
def borrowLeft(damaged, extra):
    damagedL = copy.deepcopy(damaged)
    extraL = copy.deepcopy(extra)
    for d in damaged:
        if d-1 in extra:
            damagedL.remove(d)
            extraL.remove(d-1)
    return damagedL, extraL

# 오른쪽으로, 왼쪽으로 빌려준 것 중에서 가장 적게 남긴 경우 출력
def Compare(r, l):
    if len(r) > len(l):
        return len(l)
    else:
        return len(r)

def main():
    n, damaged, extra = Input()
    newDamaged, newExtra = borrowItself(damaged, extra)
    damagedR, extraR = borrowRight(newDamaged, newExtra)
    damagedL, extraL = borrowLeft(newDamaged, newExtra)
    result = Compare(damagedR, damagedL)
    print(result)

main()
```

---

## 설명

카약이 부서진 팀이 여분의 카약을 갖고 있는 경우 남에게 빌려줄 수 없고 무조건 그 팀이 사용해야 하기 때문에 먼저 이 부분을 처리해준다.

무조건 오른쪽으로만 빌려주거나 왼쪽으로 빌려주도록 해서 계산한 결과 값이 작은 걸 출력한다.

---

## 소요 시간

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/79c50e9e-f050-4753-8f46-d0ad5babbe4d/Untitled.png)

19:24:55
