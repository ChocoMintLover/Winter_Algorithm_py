# 01. n단 논법

# [Baekjoon - 15723] n단 논법

---

[15723번: n단 논법](https://www.acmicpc.net/problem/15723)

---

## 코드

```python
import sys
INF = int(1e9)

def Input():
    n = int(sys.stdin.readline())
    premise = []
    for _ in range(n):
        a, b = sys.stdin.readline().rstrip().split(' is ')
        premise.append([ord(a)-97, ord(b)-97])
    m = int(sys.stdin.readline())
    conclusion = []
    for _ in range(m):
        a, b = sys.stdin.readline().rstrip().split(' is ')
        conclusion.append([ord(a)-97, ord(b)-97])
    return premise, conclusion

def linking(premise):
    graph = [[INF]*(26) for _ in range(26)]
    for i in range(26):
        for j in range(26):
            if i == j:
                graph[i][j] = 0
    for k in premise:
        graph[k[0]][k[1]] = 1
    return graph

def FloydWarshall(graph):
    for i in range(26):
        for j in range(26):
            for k in range(26):
                graph[j][k] = min(graph[j][k], graph[j][i] + graph[i][k])
    return graph

def TrueOrFalse(conclusion, graph):
    for i in conclusion:
        if graph[i[0]][i[1]] != INF:
            print('T')
        else:
            print('F')

def main():
    premise, conclusion = Input()
    graph = linking(premise)
    graph = FloydWarshall(graph)
    TrueOrFalse(conclusion, graph)
main()
```

---

## 설명

플로이드 와샬 알고리즘으로 풀었다.

알파벳 소문자로 받아오기 때문에 아스키 코드에서 97을 빼주는 방법으로 정수로 바꿔서 넣어줬다.

처음에는 그래프 크기를 전제 개수로 했는데 생각해보니까 알파벳 개수는 전제 개수 보다 최대 하나 더 많은 거여서 그래프 크기를 n+1로 했다.

근데 또 런타임 에러나서 혹시나 해서 길이를 다 26(알파벳 개수)로 했더니 맞았다.

---

## 소요 시간

27:48:84
