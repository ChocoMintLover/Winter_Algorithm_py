# [Baekjoon - 11724] 연결 요소의 개수

---

| https://www.acmicpc.net/problem/11724 |
| --- |
| 방향 없는 그래프가 주어졌을 때, 연결 요소 (Connected Component)의 개수를 구하는 프로그램을 작성하시오. |
| 입력 |
| 첫째 줄에 정점의 개수 N과 간선의 개수 M이 주어진다. (1 ≤ N ≤ 1,000, 0 ≤ M ≤ N×(N-1)/2) 둘째 줄부터 M개의 줄에 간선의 양 끝점 u와 v가 주어진다. (1 ≤ u, v ≤ N, u ≠ v) 같은 간선은 한 번만 주어진다. |
| 출력 |
| 첫째 줄에 연결 요소의 개수를 출력한다. |

---

## 코드

```python
import sys
from collections import deque

def Input():
    n, m = list(map(int, sys.stdin.readline().split()))
    nodes = []
    for _ in range(m):
        nodes.append(list(map(int, sys.stdin.readline().split())))
    return n, nodes

def linking(n, linked):
    computers = [[] for _ in range(n+1)]
    for c in linked:
        computers[c[0]] += [c[1]]
        computers[c[1]] += [c[0]]
    return computers

def BFS(computers, visited, start):
    visited[start] = 1
    q = deque([start])
    while q:
        c = q.popleft()
        for p in computers[c]:
            if visited[p] == 0:
                q.append(p)
                visited[p] = 1
    return visited

def main():
    n, nodes = Input()
    connected = linking(n, nodes)
    visited = [0 for _ in range(n+1)]
    visited[0] = 1
    components = 0
    while sum(visited) != n+1:
        visited = BFS(connected, visited, visited.index(0))
        components += 1
    print(components)

main()
```

---

## 설명

1번 바이러스 문제와 동일하게 BFS를 사용하였다.

방문한 노드 (visited) 리스트의 요소들의 합이 n+1이 되어야 모든 노드들을 다 방문한 것이므로 sum(visited)가 n+1이 될 때까지 while문을 돌렸다.

한 번 BFS를 돌리면 연결 요소 내에서만 노드들을 방문할 테니까 한 번 돌리고 나서는 visited 값이 0인 인덱스가 제일 작은 값을 BFS에 넣고 돌렸다.

while문을 돌린 횟수가 연결 요소 개수와 동일하므로 while문을 돌린 횟수를 출력했다.

---

## 소요 시간

32:20:89
